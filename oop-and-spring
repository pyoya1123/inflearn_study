스프링은 다음 기술로 다형성 + OCP, DIP를 가능하게 지원
- DI: 의존관계, 의존성 주입
- DI 컨테이너 제공

DI 컨테이너란?
자바 객체들을 어떤 컨테이너 안에다가 넣어놓고 이 안에서 이제 의존 관계를 서로 연결해주고 주입해주는 기능들을 제공해주는거임.
이것들을 해야 뭐가 되냐면, 클라이언트 코드의 변경 없이 기능을 확장할 수 있는거임. 이것들을 활용하면.
그래서 쉽게 부품 교체하듯이 개발이 가능하다.

애플리케이션 설계도 공연 설계하듯이 배역만 만들어두고, 배우는 언제드닞 유연하게 변경할 수 있도록 만드는 것이 좋은 객체 지향 설계다.
이거를 가능하게하려면 다형성 뿐만 아니라, OCP, DIP 등을 다 지켜야됨.
이렇게 하려면 뭔가 더 필요한게 그게 바로 스프링 컨테이너임.

이상적으로는 모든 설계에 인터페이스를 부여하는게 좋음.
왜냐하면 이렇게해야 뭐가 되냐면, 조금 이상적일 순 있지만, 완전 궁극의 그림인 정말 인터페이스로 다 놓고 구현체를 그다음에 개발하는 방식으로 하면
어떤 장점이 있냐?
예를 들어서 우리가 어떤 DB를 사용할지 정해지지 않은거임 기술적으로. 예를 들어, 관계형 데이터베이스를 쓸 지, no-sql을 쓸지 정해지지 않은거임.
그래도 뭐 다른거 가지고 개발은 해야됨. 이거를 인터페이스만 정해놓으면 가능하다.
인터페이스를 먼저 만들어놓으면 구현기술 들에 대한 선택을 최대한 미룰 수 있는 장점이 있음.
예를 들어서, 할인 정책 같은게 있는데, 구체적으로 정해지지 않음. 그렇다고 개발을 못하면 안됨. 그러면 할인 정책을 간단하게 만들어놓고,
간단한 인터페이스를 만들어놓고, 그거에 대한 간단한 구현체를 만들어서 일단 개발을 하는거임.
예를 들어서, 뭐 0원 할인 이라고 해서 개발을 하는거임. 그 다음에 개발이 진행되면서 기획에서 정리가 다 되면, 그러면 기능 확장하면 되는거임.
이런식으로 인터페이스를 먼저 설계하면, 그것들을 할 수가 있다.
그래서 인터페이스를 먼저 설계하고, 구현을 나중에 정하게 되면, 구현 기술이 바뀌더라도 나머지들을 변경할 필요가 없고,
그래서 변경의 범위가 굉장히 작고 유연해지는 장점이 있다.

그런데, 물론 실무적인 어떤 고민이 있음.
뭐가 있냐면, 이상적으로 인터페이스를 도입하는게 좋지만,
인터페이스를 무분별하게 남발하면 추상화라는 비용이 발생함.
이게 뭐냐면, 이 비용이 성능에 대한거를 말하는게 아니라, 일단 단순하게 인터페이스라는 클래스 만들어야하고,
구현 클래스를 만들어야함. 솔직히 이거는 그냥 하면 됨. 근데 뭐가 고민이 있냐면, 추상화가 되어버리면
개발자 코드를 한번 더 열어봐야함. 어? 런타임에 이게 메모리멤버레포지토리를 쓸 지, JDBC멤버레포지토리를 쓸 지
런타임에 여러개 중에 선택이 될 수가 있음. 이러면 이게 코드만 가지고 딱 열면 바로 인터페이스만 보임.
어 그러면 구현 클래스가 뭐지? 이게 안보이는거임. 한번 또 더 들어가야함. 이런식으로 코드가 추상화 됨으로써 오는
장점만 있는게 아니라, 단점도 있는거임.
그래서 항상 이 장점이 단점을 넘어설 때 선택을 해야함.
그래서 강사님이 추천해주시는 방식은, 기능을 뭔가 확장할 가능성이 없다 그러면, 구현체 클래스를 바로 쓰는거임.
그리고 향후에 꼭 필요하면 리팩토링해서 인터페이스와 구현으로 뭐 해도 되는거임. 이것도 좋은 방법이라고 하심.
근데 뭔가 딱 보고 아 이거는 미래에 확장 가능성이 있다 라고하면, 처음부터 인터페이스를 도입하는게 좋음.
이런거를 이제 미묘한데, 이런거를 잘 고민하고 설계하는게 경험이 많은 좋은 아키텍터들, 개발자들이 하는거임.