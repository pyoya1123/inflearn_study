private DiscountPolicy discountPolicy = new FixDiscountPolicy();
이러한 코드를 봤을 때, OrderServiceImpl 얘는 OrderService 관련된 로직만 해야되는데,
얘가 DiscountPolicy를 아 나는 FixDiscountPolicy를 해야돼 라고 자기가 직접 선택하는거임.
굉장히 구체적인 것 까지 다, 자기는 Discountpolicy에 대한 구체적인 정책은 FixDiscountPolicy 여야 돼요
라는걸 OrderServiceImpl이 직접 객체를 생성하고, 이 구체적인 거에 대한 선택까지 자기가 해서
discountPolicy라는 변수에 할당 하는거임.
마치 배우가 직접 여자 주인공을 초빙해서, 데려와서 하는거랑 마찬가지임.
디카프리오는 공연도 해야하고 동시에 여자 주인공도 공연에 직접 초빙해야 하는 "다양한 책임"을 가지게 된다.
우리가 봤던 이전 코드가 딱 이런거임.
관심사를 분리하자.
배우는 본인의 역할인 배역을 수행하는 것에만 집중해야 한다.
디카프리오는 어떤 주인공이 선택되든 똑같이 공연할 수 있어야함.
공연을 구성하고, 담당 배우를 섭외하고, 역할에 맞는 배우를 지정하는 책임을 담당하는 별도의 "공연 기획자"가 나올 시점이다.
공연 기획자를 만들고, 배우와 공연 기획자의 책임을 확실히 분리하자.
애플리케이션도 마찬가지임.
실제 우리가 실제 실행되는 객체들은 그 본인의 역할만 수행할 수 있도록 해줘야하고,
역할과 구현을 분리했으니까
그 인터페이스에 어떤 구현체들이 들어갈 지는, 할당 될 지는 공연 기획자가 해야하는거임.
그거를 갖다가 만들거임. -> AppConfig