스프링은 여러가지 기술의 모음임
스프링 데이터
    CRUD를 편리하게 사용할 수 있도록 도와줌
    제일 많이 쓰는게 spring data jpa를 많이 씀
스프링 세션
    세션 기능을 편리하게 사용할 수 있도록 도와줌
스프링 시큐리티
    보안 관련
스프링 REST Docs
    api 문서랑 테스트를 편하게 엮어서 문서를 편하게 해줌
스프링 배치
    실무에서는 1000만명의 데이터를 한번에 업데이트한다 이런건 실시간으로 어려움. 그래서 데이터를 1000만건 중에 100건씩 1000건씩 퍼 올려서
    저장하고, 또 퍼 올려서 저장하고 이런거를 배치 처리라고 하는데, 이 배치 처리에 특화된 기술임.
스프링 클라우드
    클라우드 기술에 특화됨.

https://spring.io/projects
여기에 되게 많음

핵심은 스프링 프레임워크임.
이 모든 기술들을 편리하게 사용할 수 있도록 도와주는게 스프링 부트임.
강사님 pdf 자료 참고하기


*스프링 부트
단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨.
위 두개를 엮어서 설명하심.
예전에는 스프링 가지고 프젝 하나 하려면, 빌드를 하고, 이걸 가지고 tomcat을 받아서 별도로 설치하고,
이 tomcat 서버의 특정 위치에다가 스프링 프젝 빌드된걸 넣고 띄우고 막 복잡했는데,
지금은 스프링 부트로 그냥 몇줄 치면 끝남. 톰캣 이런거 안깔아도 됨.

손쉬운 빌드 구성을 위한 starter 종속성 제공
- 라이브러리 쓸 때 하나 땡기면 starter가 나머지 라이브러리까지 같이 챙겨서 하는걸 편하게 잘 구성해놨음

스프링과 3rd party(외부) 라이브러리 자동 구성
- 과거에는 버전을, 스프링부트 소위 말하는 스프링 프레임워크가 3.0이야 3.1이야 근데 이거 할 때
어떤 외부 라이브러리, json 이런거랑은 잘 안맞는데 이거가 너무 힘들었었는데,
스프링 부트가 뭘 해주냐면, 스프링 프레임워크 5.1에서는 뭐 외부 라이브러리들이 뭐뭐뭐 쓰는지를 버전을 다 챙겨서 줌
유명한 major 라이브러리들은 이런 궁합과 조합이 맞는지를 다 테스트하고 버전까지 다 지정까지해서 다운로드 받게해줌
그래서 우리가 버전에 대해서 외부 라이브러리 버전에 대해서 크게 고민 안해도됨.

메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능 제공
- 운영 단계에서 모니터링 되게 중요한데 이런걸 부트가 기본적으로 어느정도 제공해줌.

관례에 의한 간결한 설정
- 예전에는 스프링 프레임워크만 쓸 때는 설정하기가 어려웠는데, 부트는 웬만해선 다 디폴트고
다 가이드라인에 나와있음. 대부분 관례에 의한 설정만 쓰고 꼭 필요한 부분만 커스텀 해서 내가 쓰면 되는거임.
개발버전, 로컬에서 뭔가 내가 공부하고 이럴 때는 거의 설정할게 없음.


스프링 부트는 스프링 프레임워크와 별도로 사용할 수 있는게 아님.
부트는 여러가지 스프링 프레임워크, 데이터 등등을 중간에서 편리하게 사용할 수 있도록 기능을 제공하는거임.
결과적으로 어떻게 얘기하면 껍데기로 볼 수 있긴한데, 기본적으로 부트는 꼭 스프링 프레임워크를 사용해서
나머지도 필요하면 땡겨와서 사용해서 도와주는 기술이지, 이것만 가지고 돌아갈 수 있는 프로젝트는 아님.


*스프링 단어?
스프링 DI 컨테이너 기술
- 핵심중에 핵심인 스프링 빈을 관리하고, DI 컨테이너 기술이고, 이런건 뒤에 나옴.


*스프링은 왜 만들었는가?
스프링의 핵심 개념, 컨셉?
- 웹 애플리케이션 만들고, DB 접근 편리하게 해주는 기술?
- 전자정부 프레임워크?
- 웹 서버도 자동으로 띄우주고?
- 클라우드, 마이크로서비스?
이런것들은 핵심이 아님. 그냥 결과물일 뿐임.

스프링의 진짜 핵심
- 스프링은 자바 언어 기반의 프레임워크
    자바는 객체지향 언어임. 스프링은 객체지향언어가 가진 강력한 특징을 살려내는 프레임워크임.
    스프링은 좋은 객체지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크임.
    이젭? 을 사용하면 상속받고, 굉장히 지저분하게 이젭에 의존적으로 개발을 했어야했음.
    그러면 객체지향이 가진 좋은 장점들을 다 잃어버림. 순수한 자바로 돌아가자 해서 퓨어 java로 돌아가자 라는 단어도 나왔었고,
    이 핵심이 바로 스프링이 가진 DI 컨테이너에 그것들을 가능하게 하는 것들이 있었음.
    그래서 진짜 핵심은 스프링이 제대로 된 객체지향 프로그래밍을 할 수 있도록 도와주는 도구라는 것이 진짜 핵심임.
    그러면 좋은 객체 지향 프로그래밍이 뭘까? 를 이해해야 제대로 스프링 프레임워크를 이해할 수 있음.